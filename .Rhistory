require(tidyverse)
require(r.jive)
require(dplyr)
results <- '/gpfs/milgram/project/gee_dylan/lms233/CMI_ABCD/Results'
#Read in JIVE data
# pheno_data <- read_csv('/Users/lucindasisk/Box/LS_Folders/CMI_ABCD/ABCD_Metrics/final_data/CMI_ABCD_Sample1_clinicalvars.csv', col_names = TRUE)
# myelin_data <- read_csv('/Users/lucindasisk/Box/LS_Folders/CMI_ABCD/ABCD_Metrics/CMI_ABCD_Sample1_myelin.csv', col_names = TRUE)
# thick_data <- read_csv('/Users/lucindasisk/Box/LS_Folders/CMI_ABCD/ABCD_Metrics/CMI_ABCD_Sample1_thickness.csv', col_names=TRUE)
# corrected_groups <- read_csv('/Users/lucindasisk/Box/LS_Folders/CMI_ABCD/ABCD_Metrics/final_data/SNF_subtyping_result_with_statistical_correction_for_pheno.csv', col_names=TRUE)
# uncorrected_groups <- read_csv('/Users/lucindasisk/Box/LS_Folders/CMI_ABCD/ABCD_Metrics/final_data/SNF_subtyping_result_without_statistical_correction_for_pheno.csv', col_names=TRUE)
pheno_data <- read_csv('/gpfs/milgram/project/gee_dylan/lms233/CMI_ABCD/CMI_ABCD_Sample1_clinicalvars.csv', col_names = TRUE)
getAnywhere(jive)
getAnywhere(jive)
getAnywhere(jive)
source('~/.active-rstudio-document', echo=TRUE)
pheno_data <- read_csv('/Users/lucindasisk/Box/LS_Folders/CMI_ABCD/ABCD_Metrics/final_data/CMI_ABCD_Sample1_clinicalvars.csv', col_names = TRUE)
require(tidyverse)
require(r.jive)
require(dplyr)
data <- SimData()
data <- data(SimData)
require(tidyverse)
require(r.jive)
require(dplyr)
data <- data(SimData)
#Run JIVE analysis for GROUP 3
#Estimate JIVE ranks based on permutation testing (best validated)
#Row-orthogonality enforced between the joint and individual estimates and also between each individual estimate.
#Compute ranks
(try(cmi_jive_result <- jive(data, scale = FALSE, conv=0.05)))
#Get Results
result_joint_rank <- cmi_jive_result$rankJ
#Estimate JIVE ranks based on permutation testing (best validated)
#Row-orthogonality enforced between the joint and individual estimates and also between each individual estimate.
#Compute ranks
(try(cmi_jive_result <- jive(data, scale = FALSE, conv=0.05)))
data <- data(SimData)
#Estimate JIVE ranks based on permutation testing (best validated)
#Row-orthogonality enforced between the joint and individual estimates and also between each individual estimate.
#Compute ranks
(try(cmi_jive_result <- jive(data, scale = FALSE, conv=0.05)))
#Estimate JIVE ranks based on permutation testing (best validated)
#Row-orthogonality enforced between the joint and individual estimates and also between each individual estimate.
#Compute ranks
(try(cmi_jive_result <- jive(data, conv=0.05)))
View(SimData)
require(tidyverse)
require(r.jive)
require(dplyr)
data <- data(SimData)
#Run JIVE analysis for GROUP 3
#Estimate JIVE ranks based on permutation testing (best validated)
#Row-orthogonality enforced between the joint and individual estimates and also between each individual estimate.
#Compute ranks
(try(cmi_jive_result <- jive(data, conv=0.05)))
#Get Results
result_joint_rank <- cmi_jive_result$rankJ
#Plot variance explained by individual and joint ranks, and noise
(try(cmi_jive_var <- showVarExplained(SimResults, col = c("#811c4e", "#fdb663", "#37486d"))))
data <- data(SimResults)
#Plot variance explained by individual and joint ranks, and noise
(try(cmi_jive_var <- showVarExplained(data, col = c("#811c4e", "#fdb663", "#37486d"))))
data(SimResults)
data(SimResults)
data(SimData)
require(tidyverse)
require(r.jive)
require(dplyr)
data(SimResults)
data(SimData)
#Estimate JIVE ranks based on permutation testing (best validated)
#Row-orthogonality enforced between the joint and individual estimates and also between each individual estimate.
#Compute ranks
(try(cmi_jive_result <- jive(SimData, conv=0.05)))
#Plot variance explained by individual and joint ranks, and noise
(try(cmi_jive_var <- showVarExplained(data, col = c("#811c4e", "#fdb663", "#37486d"))))
#Plot variance explained by individual and joint ranks, and noise
(try(cmi_jive_var <- showVarExplained(cmi_jive_result, col = c("#811c4e", "#fdb663", "#37486d"))))
#Plot heatmaps of results
(try(cmi_jive_heatmaps <- showHeatmaps(cmi_jive_result, order_by = 0, show_all = TRUE)))
#Plot PCA
try(cmi_jive_pca <- showPCA(cmi_jive_result, n_joint = result_joint_rank, n_indiv = c(1,1), Colors = c("#811c4e", "#fdb663")))
result_individ_rank <- cmi_jive_result$rankA#
result_joint_rank <- cmi_jive_result$rankJ
#Plot PCA
try(cmi_jive_pca <- showPCA(cmi_jive_result, n_joint = result_joint_rank, n_indiv = c(1,1), Colors = c("#811c4e", "#fdb663")))
#Run JIVE analysis for GROUP 3
#Estimate JIVE ranks based on permutation testing (best validated)
#Row-orthogonality enforced between the joint and individual estimates and also between each individual estimate.
#Compute ranks
(try(cmi_jive_result <- jive(SimData, conv=0.05)))
#Get Results
#Plot variance explained by individual and joint ranks, and noise
(try(cmi_jive_var <- showVarExplained(cmi_jive_result, col = c("#811c4e", "#fdb663", "#37486d"))))
#Plot heatmaps of results
(try(cmi_jive_heatmaps <- showHeatmaps(cmi_jive_result, order_by = 0, show_all = TRUE)))
result_joint_rank <- cmi_jive_result$rankJ
result_individ_rank <- cmi_jive_result$rankA#
#Plot PCA
try(cmi_jive_pca <- showPCA(cmi_jive_result, n_joint = result_joint_rank, n_indiv = c(1,1), Colors = c("#811c4e", "#fdb663")))
#No clustering efects apparent
